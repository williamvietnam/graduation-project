#import AuthorOrderByInput, CollectionOrderByInput, UserAddressOrderByInput from './generated/prisma.graphql'
#import BookOrderByInput, BookReviewOrderByInput, BookCategoryOrderByInput,BookCategoryWhereInput  from './generated/prisma.graphql'
#import BookWhereInput, PublisherWhereInput, PublisherOrderByInput, AuthorWhereInput, ProvinceOrderByInput from './generated/prisma.graphql';
#import OrderWhereInput, OrderOrderbyInput, BookReviewWhereInput, AuthTokenType from './generated/prisma.graphql';
#import BookReviewReplyOrderByInput,BookReviewSubscriptionWhereInput,BookReviewSubscriptionPayload from './generated/prisma.graphql';

type User{
    id: ID!
    username: String!
    fullName: String
    email: String!
    phone: String
    gender: Boolean
    avatar: String
    birthdate: String
    password: String!
    isActive: Boolean!
    role: UserRole!
    receiveEmailNotification: Boolean!
    addresses: [UserAddress!]!
    orders: [Order!]!
    userEvents: [UserEvent!]!
    wishList: [Book!]!
    reviews: [BookReview!]!
    createdAt: String!
    updatedAt: String!
}

type AuthToken{
    id: ID!
    token: String!
    expiredAfter: Int!
    type: AuthTokenType!
    user: User!
    createdAt: String! 
    updatedAt: String!
}

type Collection{
    id: ID! 
    name: String!
    description: String
    thumbnail: String!
    books: [Book!]!
    createdAt: String!
    updatedAt: String! 
}

# type Cart{
#     id!: ID!
#     customer: User!
#     items: [Book!]!
# }

# type CartItem{
#     id: ID!
#     item: Book!
#     quantity: Int!
#     price: Float! 
# }

type Order{
    id: ID!
    orderNumber: String
    customer: User!
    recipientAddress: String!
    recipientProvince: Province!
    recipientDistrict: District!
    recipientWard: Ward!
    recipientPhone: String!
    recipientFullName: String!
    paymentMethod: PaymentMethod!
    shippingMethod: ShippingMethod!
    orderStatus: OrderStatus!
    subTotal: Float! #Gia truoc khi tinh discount
    grandTotal: Float! #Gia sau khi tinh discount
    paymentStatus: Boolean!
    items: [OrderItem!]!
    receivedDate: String
    beginDeliveryDate: String
    createdAt: String!
    updatedAt: String!
    pickupQR: String
    orderSteps: [OrderStep!]! 
}

type OrderStep{
    id: ID!
    orderStatus: OrderStatus!
    order: Order! 
    createdAt: String! 
    updatedAt: String! 
}

type PaymentMethod{
    id: ID!
    name: String!
}

type ShippingMethod{
    id: ID!
    name: String!
    createdAt: DateTime! 
    updatedAt: DateTime!
}

type OrderItem{
    id: ID!
    order: Order!
    item: Book
    totalItemPrice: Float! # giá 1 sp nhân số lượng
    price: Float! #giá 1 sp sau khi tính km
    quantity: Int!
}

type UserEvent{
    id: ID!
    user: User!
    type: UserEventType!
    eventDetail: String!
    createdAt: String!
    updatedAt: String!
}

type UserAddress{
    id: ID!
    user: User!
    address: String!
    province: Province!
    district: District!
    ward: Ward!
    phone: String!
    fullName: String!
}

type District{
    id: ID!
    name: String!
    type: String!
    province: Province!
}

type Province{
    id: ID!
    name: String!
    type: String!
}


type Ward{
    id: ID!
    name: String!
    type: String!
    district: District
}

type Book{
    id: ID!
    title: String!
    description: String
    categories: [BookCategory!]!
    authors: [Author!]!
    reviews: [BookReview!]!
    isbn: String!
    sku: String
    format: BookFormat!
    dimensions: String
    translator: String
    publishedDate: String
    collections: [Collection!]!
    publisher: Publisher!
    availableCopies: Int!
    basePrice: Float!
    pages: Int
    thumbnail: String!
    images: String
    discounts: [Discount!]!
    avgRating: Float
}

type BookReview{
    id: ID!
    reviewHeader: String
    reviewText: String
    rating: Int!
    author: User!
    book: Book!
    replies: [BookReviewReply!]!
    createdAt: String!
    updatedAt: String!
}

type BookReviewReply{
    id: ID!
    text: String
    author: User!
    book: Book!
    bookReview: BookReview! 
    createdAt: String!
    updatedAt: String!
}

type BookCategory{
    id: ID!
    name: String!
    books(where: BookWhereInput): [Book!]!
}

type Discount{
    id: ID!
    name: String
    discountRate: Float
    from: String
    to: String
    appliedTo: [Book]!
    usePercentage: Boolean
    discountAmount: Float
}

type Publisher{
    id: ID!
    name: String!
    description: String
    image: String
    books(where: BookWhereInput): [Book!]!
}

type Author{
    id: ID!
    realName: String
    pseudonym: String
    image: String
    description: String
    books(where: BookWhereInput): [Book!]!
}

enum BookFormat{
    HardCover
    PaperBack
}

enum UserEventType{
    View
    Comment
    Review
    Order
}

enum UserRole{
    User
    Staff
    Admin
}

enum OrderStatus{
    Ordered
    Recieved
    Processing
    GettingProduct
    Packaged
    HandOver
    Shipping
    Completed
    Canceled
}

type Query{
    getBooks(where: BookWhereInput,orderBy: BookOrderByInput, first: Int, skip:Int, selection: String): BooksPayload!
    getBooksForBrowsing(where: BookWhereInput,orderBy: BookOrderByInput, first: Int, skip:Int): BooksForBrowsingPayload!
    getBook(id: ID!): Book!
    getCategories(where: BookCategoryWhereInput, orderBy: BookCategoryOrderByInput, first: Int, skip: Int): [BookCategory!]!
    getCategory(id: ID!): BookCategory!
    getAuthors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, first: Int, skip: Int): [Author!]!
    getAuthor(id: ID!): Author!
    getCollections(name: String, orderBy: CollectionOrderByInput, first: Int,skip: Int): GetCollectionsPayload!
    getCollection(id: ID!): Collection!
    getBookReviewsByBook(bookId: ID, orderBy: BookReviewOrderByInput, first: Int,skip: Int): GetBookReviewsByBookPayload!
    getBookReviews(where: BookReviewWhereInput, orderBy: BookReviewOrderByInput, first: Int,skip: Int): GetBookReviewsByBookPayload!
    getUserAddresses: [UserAddress!]!
    getPublishers(where: PublisherWhereInput, orderBy: PublisherOrderByInput, first: Int, skip: Int): [Publisher!]!
    getItemStockQty(id: ID!): GetItemStockQtyPayload!
    getProvinces: [Province!]!
    getDistricts(provinceId: ID!): [District!]!
    getWards(districtId: ID!): [Ward!]!
    getOrders(where: OrderWhereInput, orderBy: OrderOrderByInput,first: Int,skip: Int,selection: String): OrderPayload!
    getOrderById(id: ID!): Order!
    getReviewRepliesByReview(reviewId: ID!): [BookReviewReply!]!
    getWishList: GetWishListPayload!
    getBestSeller(first: Int! ,skip: Int, dateFrom: String, dateTo: String): BooksPayload!
    getBestSellerForBrowsing(first: Int! ,skip: Int, dateFrom: String, dateTo: String): BooksForBrowsingPayload!

    getReviewById(id: ID!): BookReview!
}

type BooksForBrowsingPayload{
    books: [ProcessedBook!]!
    totalCount: Int
}

type ProcessedBook{
    id: ID!
    title: String!
    description: String
    categories: [BookCategory!]!
    authors: [Author!]!
    reviews: ProcessedReview!
    isbn: String!
    sku: String
    format: BookFormat!
    dimensions: String
    translator: String
    publishedDate: String
    collections: [Collection!]!
    publisher: Publisher!
    availableCopies: Int!
    basePrice: Float!
    pages: Int
    thumbnail: String!
    images: String
    discounts: ProcessedDiscount!
}

type ProcessedDiscount{
    discountAmount: Float!
    discountRate: Float!
    discountedPrice: Float!
}

type ProcessedReview{
    avgRating: Float!
    totalCount: Int
}

type GetCollectionsPayload{
    collections: [Collection!]!
    totalCount: Int
}

type Mutation{
    signUp(data: UserSignupInput!): AuthPayload!
    login(data: UserLoginInput!): AuthPayload!
    updateUser(data: CustomUserUpdateInput!): User!
    createBook(data: BookCreateInput!): Book!
    updateBook(id: ID!, data: BookUpdateInput!): Book!
    createCollection(data: CollectionCreateInput!): Collection!
    updateCollection(id: ID!, data: CollectionUpdateInput!): Collection!
    createUserAddress(data: UserAddressCreateInput!): UserAddress!
    updateUserAddress(id: ID!,data: UserAddressUpdateInput!): UserAddress!
    createBookReview(data: BookReviewCreateInput!): BookReview!
    updateBookReview(id: ID!,data: BookReviewUpdateInput!): BookReview!
    createBookCategory(data: BookCategoryCreateInput!): BookCategory!
    updateBookCategory(id: ID!,data: BookCategoryUpdateInput!): BookCategory!
    createPublisher(data: PublisherCreateInput!): Publisher!
    updatePublisher(id: ID!,data: PublisherUpdateInput!): Publisher!
    createAuthor(data: AuthorCreateInput!): Author!
    updateAuthor(id: ID!,data: AuthorCreateInput!): Author!
    createOrder(data: OrderCreateInput!): Order!
    updateOrderStatus(orderId: ID!,orderStatus: OrderStatus!): Order!
    updateOrderAddress(orderId: ID!,data: OrderAddressUpdateInput!): Order!
    createReviewReply(data: ReviewReplyCreateInput!): BookReviewReply!
    deleteUserAddress(id: ID!): UserAddress!
    addBookToWishList(bookId: ID!): AddBookToWishListPayload!
    removeBookFromWishList(bookId: ID!): AddBookToWishListPayload!
    createPasswordToken(email: String!): CreatePasswordTokenPayload!
    sendPasswordViaEmail(email: String!): CreatePasswordTokenPayload!
    resetPassword(passwordToken: String!, password: String!): CreatePasswordTokenPayload!
}

input OrderAddressUpdateInput{
    recipientAddress: String
    recipientFullName: String
    recipientProvince: ID
    recipientWard: ID
    recipientDistrict: ID
    recipientPhone: String
}

type CreatePasswordTokenPayload{
    statusCode: Int!
    message: String
    data: String
}

type GetWishListPayload{
    statusCode: Int!
    message: String
    data: BooksPayload
}

type AddBookToWishListPayload{
    statusCode: Int!
    message: String
    data: String
}

input ReviewReplyCreateInput{
    text: String
    book: ID!
    bookReview: ID!
}

type OrderPayload{
    orders: [Order!]!
    totalCount: Int
}

input OrderCreateInput{
    shippingAddress: ID!
    shippingMethod: ID!
    paymentMethod: ID!
    items: [OrderItemCreateInput!]!
}

input OrderItemCreateInput{
    book: ID!
    quantity: Int!
}


type Subscription{
    user: User!
    bookReview(where: BookReviewSubscriptionWhereInput!): BookReviewSubscriptionPayload!
}

type GetBookReviewsByBookPayload{
    bookReviews: [BookReview!]!
    totalCount: Int
    avgScore: Float
    fiveStar: Int
    fourStar: Int
    threeStar: Int
    twoStar: Int
    oneStar: Int
}

type BooksPayload{
    books: [Book!]!
    totalCount: Int
}

type AuthPayload{
    statusCode: Int
    message: String
    user: User
    token: String
}

type GetItemStockQtyPayload{
    qty: Int!
    id: ID!
}

input AuthorCreateInput{
    realName: String
    pseudonym: String
    image: String
    description: String
}

input PublisherCreateInput{
    name: String!
    description: String
    image: String
}

input PublisherUpdateInput{
    name: String
    description: String
    image: String
}

input BookCategoryCreateInput{
    name: String!
}

input BookCategoryUpdateInput{
    name: String
}

input BookReviewCreateInput{
    book: ID!
    reviewHeader: String
    reviewText: String
    rating: Int!
}

input BookReviewUpdateInput{
    book: ID!
    reviewHeader: String
    reviewText: String
    rating: Int
}

input UserAddressCreateInput{
    address: String!
    phone: String!
    fullName: String!
    province: ID!
    district: ID!
    ward: ID!
}

input UserAddressUpdateInput{
    address: String
    ward: ID
    district: ID
    province: ID
    phone: String
    fullName: String
}

input CollectionUpdateInput{
    name: String
    description: String
    thumbnail: String
    cover: String
}

input CollectionCreateInput{
    name: String!
    description: String
    thumbnail: String!
    cover: String!
}

input CustomUserUpdateInput{
    fullName: String
    changePassword: Boolean
    phone: String
    gender: Boolean
    birthdate: String
    password: String
    currentPassword: String
}

input BookUpdateInput{
    title: String
    description: String
    categories: [ID!]
    authors: [ID!]
    isbn: String
    format: BookFormat
    translator: String
    dimensions: String
    publishedDate: String
    publisher: ID
    availableCopies: Int
    basePrice: Float
    pages: Int
    thumbnail: String
    images: String
}

input BookCreateInput{
    title: String!
    description: String
    categories: [ID!]!
    translator: String
    authors: [ID!]!
    isbn: String!
    format: BookFormat!
    dimensions: String
    publishedDate: String
    publisher: ID!
    availableCopies: Int!
    basePrice: Float!
    pages: Int
    thumbnail: String!
    images: String!
}

input UserLoginInput{
    email: String!
    password: String!
}

input UserSignupInput{
    username: String!
    password: String!
    fullName: String
    email: String!
    phone: String
    gender: Boolean
    avatar: String
    birthdate: String
    receiveEmailNotification: Boolean
}
